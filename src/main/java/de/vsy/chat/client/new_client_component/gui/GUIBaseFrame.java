package de.vsy.chat.client.new_client_component.gui;

import de.vsy.chat.client.controlling.essential_gui_action_interfaces.GUIActions;
import de.vsy.chat.client.gui.chatter_main_model.GUILabelChangeListener;
import de.vsy.chat.client.gui.chatter_main_model.GUILogicRelevantDataProvider;
import de.vsy.chat.client.gui.chatter_main_model.customRendering.ContactListRenderer;
import de.vsy.chat.client.gui.essential_graphical_units.MessageHistory;
import de.vsy.chat.transmission.dto.CommunicatorDTO;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import static de.vsy.chat.utility.standard_value.StandardIdProvider.STANDARD_CLIENT_ID;
import static javax.swing.ListSelectionModel.SINGLE_SELECTION;

/**
 *
 * @author fredward
 */
public class GUIBaseFrame extends javax.swing.JFrame implements Runnable, GUILabelChangeListener, GUILogicRelevantDataProvider {
private static final long serialVersionUID = -2230576956326479400L;
  private volatile boolean guiClosedFlag;
  private transient GUIActions guiController;
  private JLabel activeChatLabel;
  private JList<CommunicatorDTO> contactList;
  private JScrollPane contactListScrollBar;
  private JMenuBar menuBar;
  private JScrollPane messageHistoryScrollBar;
  private JTextArea messageInput;

  public GUIBaseFrame() {
    guiClosedFlag = false;
    initComponents();
    initContactlist();

    validate();
    pack();
  }

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 414, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void initContactlist() {
    this.contactList = new JList<>();
    this.contactListScrollBar.add(this.contactList);
    this.contactList.setCellRenderer(new ContactListRenderer());
    this.contactList.setSelectionMode(SINGLE_SELECTION);
    this.contactList.setToolTipText("");
    this.contactList.addMouseListener(
        new MouseAdapter() {
          @Override
          public void mouseClicked(final MouseEvent evt) {
            guiController.chooseContact(evt);
          }
        });
    this.contactList.getAccessibleContext().setAccessibleName("");
    this.contactListScrollBar.setViewportView(this.contactList);
  }

  @Override
  public String getMessage() {
    final var message = this.messageInput.getText();
    this.messageInput.setText("");
    return message;
  }

  @Override
  public CommunicatorDTO getSelectedContact() {
    return this.contactList.getSelectedValue();
  }

  /**
   * Inits the GUI control.
   *
   * @param guiController the gui controller
   * @param chatterMenu the chatter menu
   */
  public void initGUIControl(final GUIActions guiController, final JMenuBar chatterMenu) {

    if (this.guiController == null) {
      setGUIActionController(guiController);
    }

    if (this.menuBar == null) {
      setMenuBar(chatterMenu);
    }
  }

  /**
   * Sets the GUI action controller.
   *
   * @param guiController the new GUI action controller
   */
  private void setGUIActionController(final GUIActions guiController) {
    this.guiController = guiController;
  }

  /**
   * Sets the menu bar.
   *
   * @param chatterMenu the new menu bar
   */
  private void setMenuBar(final JMenuBar chatterMenu) {
    this.menuBar = chatterMenu;
    setJMenuBar(this.menuBar);
  }

  @Override
  public void run() {
    Thread.currentThread().setName("GUI-Thread");
    setLocationRelativeTo(null);
    setVisible(true);
  }

  /**
   * Sets the chat label.
   *
   * @param newLabel the new chat label
   */
  public void setChatLabel(final String newLabel) {
    this.activeChatLabel.setText(newLabel);
  }

  /**
   * Sets the contact list model.
   *
   * @param contactList the new contact list model
   */
  public void setContactListModel(final DefaultListModel<CommunicatorDTO> contactList) {
    this.contactList.setModel(contactList);
  }

  /**
   * Sets the message history.
   *
   * @param messages the new message history
   */
  public void setMessageHistory(final MessageHistory messages) {
    this.messageHistoryScrollBar.add(messages);
    this.messageHistoryScrollBar.setViewportView(messages);
    pack();
  }

  @Override
  public void setNewChatLabel(final CommunicatorDTO contactData) {
    final var newChatLabel = new StringBuilder();

    if (contactData != null && contactData.getCommunicatorId() != STANDARD_CLIENT_ID) {
      newChatLabel.append(contactData.getDisplayLabel());
      this.messageInput.setEditable(true);
    } else {
      newChatLabel.append("");
      this.messageInput.setEditable(false);
    }

    this.activeChatLabel.setText(newChatLabel.toString());
  }

  // -------------------------------------------
  // ---Data-Change-Listener--------------------
  // -------------------------------------------
  @Override
  public void setNewClientLabel(final CommunicatorDTO contactData) {
    final var sb = new StringBuilder();

    if (contactData != null && contactData.getCommunicatorId() != STANDARD_CLIENT_ID) {
      int clientId;

      if ((clientId = contactData.getCommunicatorId()) != STANDARD_CLIENT_ID) {
        sb.append("Eingeloggt als: ")
            .append(contactData.getDisplayLabel())
            .append(" (ID: ")
            .append(clientId)
            .append(")");
      }
    }

    if (sb.length() == 0) {
      sb.append("Nicht authentifiziert");
    }

    setTitle(sb.toString());
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
